// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  UserCredit      UserCredit?
  UserGenerations UserGenerations[]
}

model UserCredit {
  id           String   @id @default(cuid())
  userId       String
  dailyCredits Int
  paidCredits  Int
  dailyReset   DateTime
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GenerationType {
  chat
  image
  audio
}

model UserGenerations {
  id      String             @id @default(cuid())
  prompt  String
  userId  String
  cost    Int
  type    GenerationType
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  outputs GenerationOutput[]

  @@unique([userId, id])
}

model GenerationOutput {
  id               String          @id @default(cuid())
  path             String?
  userGenerationId String
  userGeneration   UserGenerations @relation(fields: [userGenerationId], references: [id], onDelete: Cascade)

  @@unique([userGenerationId, id])
}
